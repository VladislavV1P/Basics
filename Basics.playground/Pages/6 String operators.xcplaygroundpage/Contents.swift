//: [Previous](@previous)

import Foundation

var greeting = "Hello, world"

//–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ª–∏—Ç–µ—Ä–∞–ª–∞—Ö
let string = """
 \0 (–ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª),
 \\ (–æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–∞—è —á–µ—Ä—Ç–∞),
 \t (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞),
 \n (–ø–æ–¥–∞—á–∞ –ª–∏–Ω–∏–∏),
 \r (–≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏),
 \" (–¥–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞) –∏
 \' (–æ–¥–Ω–∞ –∫–∞–≤—ã—á–∫–∞)
 \u{24} (1-8-–∑–Ω–∞—á–Ω–æ–µ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –Æ–Ω–∏–∫–æ–¥–∞)
"""

//–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Å—Ç—Ä–æ–∫ #"Line 1\nLine 2"#
let threeMoreDoubleQuotationMarks = #"""
 \#0 (–ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª),
 \\ (–æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–∞—è —á–µ—Ä—Ç–∞),
 \#t (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞),
 \n (–ø–æ–¥–∞—á–∞ –ª–∏–Ω–∏–∏),
 \r (–≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏),
 \" (–¥–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞) –∏
 \' (–æ–¥–Ω–∞ –∫–∞–≤—ã—á–∫–∞)
 \u{24} (1-8-–∑–Ω–∞—á–Ω–æ–µ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –Æ–Ω–∏–∫–æ–¥–∞)
"""#

//–£–∑–Ω–∞–π—Ç–µ, –ø—É—Å—Ç–æ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ String, –ø—Ä–æ–≤–µ—Ä–∏–≤ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–æ Boolean isEmpty
if greeting.isEmpty {
    print("Nothing to see here")
}

//Character values for a String
for character in "Dog!üê∂" {
    print(character)
}
let catCharacters: [Character] = ["C", "a", "t", "!", "üê±"]
let catString = String(catCharacters)

//–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ Character
let exclamationMark: Character = "!"
greeting.append(exclamationMark)

//üåÄ–°–∫–∞–ª—è—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è Unicode
let eAcute: Character = "\u{E9}"                         // √©
let combinedEAcute: Character = "\u{65}\u{301}"

//üåÄ–ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤
let unusualMenagerie = "Koala üê®, Snail üêå, Penguin üêß, Dromedary üê™"
print("unusualMenagerie has \(unusualMenagerie.count) characters")

//üåÄ–î–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–æ–∫–µ –∏ –µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ

greeting.prefix(5)
greeting.suffix(6)
greeting[greeting.startIndex..<greeting.endIndex]

greeting[greeting.startIndex]

greeting[greeting.index(
    before: greeting.endIndex)]

greeting[greeting.index(
    after: greeting.startIndex)]

let index = greeting.index(
    greeting.startIndex,
    offsetBy: 7)

let index2 = greeting.index(
    greeting.startIndex,
    offsetBy: 7,
    limitedBy: greeting.endIndex) ?? greeting.startIndex

greeting[index2]

greeting[greeting.index(
    before: greeting.endIndex)]

//üåÄ–ü–æ–¥—Å—Ç—Ä–æ–∫–∏
let index1 = greeting.firstIndex(of: ",") ?? greeting.endIndex
let beginning = greeting[..<index1]
let newString = String(beginning)

//üåÄ–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ indices –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –∏–Ω–¥–µ–∫—Å–∞–º –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.
for a in greeting.indices {
    print(a , " \(greeting[a])")
}

//üåÄ–í—Å—Ç–∞–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
var welcome = "Hello"
welcome.insert("!", at: welcome.endIndex)
welcome.insert(contentsOf: " there", at: welcome.index(before: welcome.endIndex))

welcome.remove(at: welcome.index(before: welcome.endIndex))
welcome

let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex
welcome.removeSubrange(range)

//üåÄ–†–∞–≤–µ–Ω—Å—Ç–≤–æ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤

let romeoAndJuliet = [
    "Act 1 Scene 1: Verona, A public place",
    "Act 1 Scene 2: Capulet's mansion",
    "Act 1 Scene 3: A room in Capulet's mansion",
    "Act 1 Scene 4: A street outside Capulet's mansion",
    "Act 1 Scene 5: The Great Hall in Capulet's mansion",
    "Act 2 Scene 1: Outside Capulet's mansion",
    "Act 2 Scene 2: Capulet's orchard",
    "Act 2 Scene 3: Outside Friar Lawrence's cell",
    "Act 2 Scene 4: A street in Verona",
    "Act 2 Scene 5: Capulet's mansion",
    "Act 2 Scene 6: Friar Lawrence's cell"
]

var act1SceneCount = 0
for scene in romeoAndJuliet {
    if scene.hasPrefix("Act 1 ") {
        act1SceneCount += 1
    }
}
print("There are \(act1SceneCount) scenes in Act 1")

var mansionCount = 0
var cellCount = 0
for scene in romeoAndJuliet {
    if scene.hasSuffix("Capulet's mansion") {
        mansionCount += 1
    }
    if scene.hasSuffix("Friar Lawrence's cell") {
        cellCount += 1
    }
}
print("\(mansionCount) mansion scenes; \(cellCount) cell scenes")

//üåÄ–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ Unicode
let dogString = "Dog‚Äºüê∂"
for codeUnit in dogString.utf8 {
    print("\(codeUnit)", terminator: ", ")
}
print("")

for codeUnit in dogString.utf16 {
    print("\(codeUnit)", terminator: ", ")
}
print("")

for codeUnit in dogString.unicodeScalars {
    print("\(codeUnit.value)", terminator: ", ")
}
print("")

for codeUnit in dogString.unicodeScalars {
    print("\(codeUnit)", terminator: ", ")
}
print("")

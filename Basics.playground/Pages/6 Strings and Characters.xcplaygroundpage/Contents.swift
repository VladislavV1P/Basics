//: [Previous](@previous)

import Foundation

//Strings and Characters
//–°—Ç—Ä–æ–∫–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã ""
let someString = "Some string literal value"

//–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã """ ... """
let quotation = """
The White Rabbit put on his spectacles.  "Where shall I begin,
please your Majesty?" he asked.

"Begin at the beginning," the King said gravely, "and go on
till you come to the end; then stop."
"""

//—Ä–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–æ–∫ (\) –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
let softWrappedQuotation = """
The White Rabbit put on his spectacles.  "Where shall I begin, \
please your Majesty?" he asked.

"Begin at the beginning," the King said gravely, "and go on \
till you come to the end; then stop."
"""

//–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ª–∏—Ç–µ—Ä–∞–ª–∞—Ö
/*
 –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
 \0 (–ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª),
 \\ (–æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–∞—è —á–µ—Ä—Ç–∞),
 \t (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞),
 \n (–ø–æ–¥–∞—á–∞ –ª–∏–Ω–∏–∏),
 \r (–≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏),
 \" (–¥–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞) –∏
 \' (–æ–¥–Ω–∞ –∫–∞–≤—ã—á–∫–∞)
 */

let string = """
 \0 (–ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª),
 \\ (–æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–∞—è —á–µ—Ä—Ç–∞),
 \t (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞),
 \n (–ø–æ–¥–∞—á–∞ –ª–∏–Ω–∏–∏),
 \r (–≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏),
 \" (–¥–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞) –∏
 \' (–æ–¥–Ω–∞ –∫–∞–≤—ã—á–∫–∞)
 \u{24} (1-8-–∑–Ω–∞—á–Ω–æ–µ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –Æ–Ω–∏–∫–æ–¥–∞)
"""

let dollarSign = "\u{24}"        // $,  Unicode scalar U+0024
let blackHeart = "\u{2665}"      // ‚ô•,  Unicode scalar U+2665
let sparklingHeart = "\u{1F496}" // üíñ, Unicode scalar U+1F496


//let threeDoubleQuotationMarks = """
//Escaping the first quotation mark \"""
//Escaping all three quotation marks \"\"\"
//"""

//–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Å—Ç—Ä–æ–∫ #"Line 1\nLine 2"#

let threeMoreDoubleQuotationMarks = #"""
 \#0 (–ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª),
 \\ (–æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–∞—è —á–µ—Ä—Ç–∞),
 \#t (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞),
 \n (–ø–æ–¥–∞—á–∞ –ª–∏–Ω–∏–∏),
 \r (–≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏),
 \" (–¥–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞) –∏
 \' (–æ–¥–Ω–∞ –∫–∞–≤—ã—á–∫–∞)
 \u{24} (1-8-–∑–Ω–∞—á–Ω–æ–µ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –Æ–Ω–∏–∫–æ–¥–∞)
"""#

//üåÄ–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
var emptyString = ""               // empty string literal
var anotherEmptyString = String()  // initializer syntax

//–£–∑–Ω–∞–π—Ç–µ, –ø—É—Å—Ç–æ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ String, –ø—Ä–æ–≤–µ—Ä–∏–≤ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–æ Boolean isEmpty:
if emptyString.isEmpty {
    print("Nothing to see here")
}

//üåÄ–ò–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
var variableString = "Horse"
variableString += " and carriage"
// variableString is now "Horse and carriage"

let constantString = "Highlander"
//constantString += " and another Highlander"
// this reports a compile-time error - a constant string cannot be modified

//üåÄString type is a value type
//Character values for a String

for character in "Dog!üê∂" {
    print(character)
}

let exclamationMark: Character = "!"
let catCharacters: [Character] = ["C", "a", "t", "!", "üê±"]
let catString = String(catCharacters)

//–û–±—ä–µ–¥–∏–Ω—è—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–∏–º–≤–æ–ª—ã
let string1 = "hello"
let string2 = " there"
var welcome = string1 + string2

var instruction = "look over"
instruction += string2

//–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ Character –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π String —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ append() —Ç–∏–ø–∞ String:
let exclamationMark1: Character = "!"
welcome.append(exclamationMark1)

let badStart = """
one
two

"""
let end = """
three
"""
print(badStart + end)

//üåÄ–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Å—Ç—Ä–æ–∫
let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
print(#"Write an interpolated string in Swift using \(multiplier)."#)
print(#"6 times 7 is \#(6 * 7)."#)

//üåÄ–°–∫–∞–ª—è—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è Unicode
let eAcute: Character = "\u{E9}"                         // √©
let combinedEAcute: Character = "\u{65}\u{301}"

let precomposed: Character = "\u{D55C}"                  // Ìïú
let decomposed: Character = "\u{1112}\u{1161}\u{11AB}"

let enclosedEAcute: Character = "\u{11AB}\u{20DD}"

let regionalIndicatorForUS: Character = "\u{1F1FA}\u{1F1F8}"

//üåÄ–ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤
let unusualMenagerie = "Koala üê®, Snail üêå, Penguin üêß, Dromedary üê™"
print("unusualMenagerie has \(unusualMenagerie.count) characters")

/*
 –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é —á–µ—Ç—ã—Ä–µ—Ö—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ cafe, –∞ –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ—Ç–µ COMBINING ACUTE ACCENT (U+0301) –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏, —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ 4, —Å —á–µ—Ç–≤–µ—Ä—Ç—ã–º —Å–∏–º–≤–æ–ª–æ–º √©, –∞ –Ω–µ e:
 */
var word = "cafe"
word += "\u{301}"
print("the number of characters in \(word) is \(word.count)")

//–î–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–æ–∫–µ –∏ –µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
/*
 –ö–∞–∂–¥–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–Ω–¥–µ–∫—Å–∞ String.Index, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—é –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ.
 */

let greeting = "Guten Tag!"
greeting[greeting.startIndex] // G
greeting[greeting.index(before: greeting.endIndex)] // !
greeting[greeting.index(after: greeting.startIndex)] // u
let index = greeting.index(greeting.startIndex, offsetBy: 7)
greeting[index] // a

greeting[greeting.index(before: greeting.endIndex)]

for a in greeting.indices {
    print(a , " \(greeting[a])")
}


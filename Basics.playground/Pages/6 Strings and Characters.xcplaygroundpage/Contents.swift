//: [Previous](@previous)

import Foundation

//Strings and Characters
//–°—Ç—Ä–æ–∫–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã ""
let someString: String = "Some string literal value"

//–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã """ ... """
let quotation = """
The White Rabbit put on his spectacles.  "Where shall I begin,
please your Majesty?" he asked.

"Begin at the beginning," the King said gravely, "and go on
till you come to the end; then stop."
"""

//—Ä–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–æ–∫ (\) –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
let softWrappedQuotation = """
The White Rabbit put on his spectacles.  "Where shall I begin, \
please your Majesty?" he asked.

"Begin at the beginning," the King said gravely, "and go on \
till you come to the end; then stop."
"""

//–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ª–∏—Ç–µ—Ä–∞–ª–∞—Ö
/*
 –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
 \0 (–ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª),
 \\ (–æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–∞—è —á–µ—Ä—Ç–∞),
 \t (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞),
 \n (–ø–æ–¥–∞—á–∞ –ª–∏–Ω–∏–∏),
 \r (–≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏),
 \" (–¥–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞) –∏
 \' (–æ–¥–Ω–∞ –∫–∞–≤—ã—á–∫–∞)
 */

let string = """
 \0 (–ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª),
 \\ (–æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–∞—è —á–µ—Ä—Ç–∞),
 \t (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞),
 \n (–ø–æ–¥–∞—á–∞ –ª–∏–Ω–∏–∏),
 \r (–≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏),
 \" (–¥–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞) –∏
 \' (–æ–¥–Ω–∞ –∫–∞–≤—ã—á–∫–∞)
 \u{24} (1-8-–∑–Ω–∞—á–Ω–æ–µ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –Æ–Ω–∏–∫–æ–¥–∞)
"""

let dollarSign = "\u{24}"        // $,  Unicode scalar U+0024
let blackHeart = "\u{2665}"      // ‚ô•,  Unicode scalar U+2665
let sparklingHeart = "\u{1F496}" // üíñ, Unicode scalar U+1F496


//let threeDoubleQuotationMarks = """
//Escaping the first quotation mark \"""
//Escaping all three quotation marks \"\"\"
//"""

//–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Å—Ç—Ä–æ–∫ #"Line 1\nLine 2"#

let threeMoreDoubleQuotationMarks = #"""
 \#0 (–ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª),
 \\ (–æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–∞—è —á–µ—Ä—Ç–∞),
 \#t (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞),
 \n (–ø–æ–¥–∞—á–∞ –ª–∏–Ω–∏–∏),
 \r (–≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏),
 \" (–¥–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞) –∏
 \' (–æ–¥–Ω–∞ –∫–∞–≤—ã—á–∫–∞)
 \u{24} (1-8-–∑–Ω–∞—á–Ω–æ–µ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –Æ–Ω–∏–∫–æ–¥–∞)
"""#

//üåÄ–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
var emptyString = ""               // empty string literal
var anotherEmptyString = String()  // initializer syntax

//–£–∑–Ω–∞–π—Ç–µ, –ø—É—Å—Ç–æ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ String, –ø—Ä–æ–≤–µ—Ä–∏–≤ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–æ Boolean isEmpty:
if emptyString.isEmpty {
    print("Nothing to see here")
}

//üåÄ–ò–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
var variableString = "Horse"
variableString += " and carriage"
// variableString is now "Horse and carriage"

let constantString = "Highlander"
//constantString += " and another Highlander"
// this reports a compile-time error - a constant string cannot be modified

//üåÄString type is a value type
//Character values for a String

for character in "Dog!üê∂" {
    print(character)
}

let exclamationMark: Character = "!"
let catCharacters: [Character] = ["C", "a", "t", "!", "üê±"]
let catString = String(catCharacters)

//–û–±—ä–µ–¥–∏–Ω—è—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–∏–º–≤–æ–ª—ã
let string1 = "hello"
let string2 = " there"
var welcome = string1 + string2

var instruction = "look over"
instruction += string2

//–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ Character –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π String —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ append() —Ç–∏–ø–∞ String:
let exclamationMark1: Character = "!"
welcome.append(exclamationMark1)

let badStart = """
one
two

"""
let end = """
three
"""
print(badStart + end)

//üåÄ–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Å—Ç—Ä–æ–∫
let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
print(#"Write an interpolated string in Swift using \(multiplier)."#)
print(#"6 times 7 is \#(6 * 7)."#)

//üåÄ–°–∫–∞–ª—è—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è Unicode
let eAcute: Character = "\u{E9}"                         // √©
let combinedEAcute: Character = "\u{65}\u{301}"

let precomposed: Character = "\u{D55C}"                  // Ìïú
let decomposed: Character = "\u{1112}\u{1161}\u{11AB}"

let enclosedEAcute: Character = "\u{11AB}\u{20DD}"

let regionalIndicatorForUS: Character = "\u{1F1FA}\u{1F1F8}"

//üåÄ–ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤
let unusualMenagerie = "Koala üê®, Snail üêå, Penguin üêß, Dromedary üê™"
print("unusualMenagerie has \(unusualMenagerie.count) characters")

/*
 –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é —á–µ—Ç—ã—Ä–µ—Ö—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ cafe, –∞ –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ—Ç–µ COMBINING ACUTE ACCENT (U+0301) –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏, —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ 4, —Å —á–µ—Ç–≤–µ—Ä—Ç—ã–º —Å–∏–º–≤–æ–ª–æ–º √©, –∞ –Ω–µ e:
 */
var word = "cafe"
word += "\u{301}"
print("the number of characters in \(word) is \(word.count)")

//üåÄ–î–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–æ–∫–µ –∏ –µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
/*
 –ö–∞–∂–¥–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–Ω–¥–µ–∫—Å–∞ String.Index, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—é –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ.
 */

let greeting = "Guten Tag!"
greeting[greeting.startIndex] // G
greeting[greeting.index(before: greeting.endIndex)] // !
greeting[greeting.index(after: greeting.startIndex)] // u
let index = greeting.index(greeting.startIndex, offsetBy: 7)
// limitedBy –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–º–µ—â–µ–Ω–∏–µ –Ω–µ –≤—ã—à–ª–æ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–Ω–¥–µ–∫—Å–∞. –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –∏–Ω–¥–µ–∫—Å. –ü–æ—Å–∫–æ–ª—å–∫—É —Å–º–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –ø—Ä–µ–¥–µ–ª, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π. –û–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–ª—å, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏.
let index2 = greeting.index(greeting.startIndex, offsetBy: 7, limitedBy: greeting.endIndex) ?? greeting.startIndex

greeting[index2] // a

greeting[greeting.index(before: greeting.endIndex)]

//–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ indices –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –∏–Ω–¥–µ–∫—Å–∞–º –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.
for a in greeting.indices {
    print(a , " \(greeting[a])")
}

//üåÄ–í—Å—Ç–∞–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
/*
 –ß—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –≤ —Å—Ç—Ä–æ–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ insert(_:at:), –∞ —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ insert(contentsOf:at:).
 */
var welcome1 = "Hello"
welcome1.insert("!", at: welcome1.endIndex)
welcome1.insert(contentsOf: " there", at: welcome1.index(before: welcome1.endIndex))

/*
 –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ remove(at:), –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ removeSubrange(_:):
 */
welcome1.remove(at: welcome1.index(before: welcome1.endIndex))
welcome1

let range = welcome1.index(welcome1.endIndex, offsetBy: -6)..<welcome1.endIndex
welcome1.removeSubrange(range)

welcome1.prefix(5)
welcome1.suffix(6)

//üåÄ–ü–æ–¥—Å—Ç—Ä–æ–∫–∏
/*
 –í –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –≤—ã—à–µ –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–Ω–∞ –∏–º–µ–µ—Ç –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–∏–º–≤–æ–ª—ã, —Å–æ—Å—Ç–∞–≤–ª—è—â–∏–µ —Å—Ç—Ä–æ–∫—É. –ü–æ—Å–∫–æ–ª—å–∫—É –Ω–∞—á–∞–ª–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –æ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞–º—è—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º. –ù–∞–ø—Ä–æ—Ç–∏–≤, newString - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –∫–æ–≥–¥–∞ –æ–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–∑ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏, —É –Ω–µ–µ –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. –ù–∞ —Ä–∏—Å—É–Ω–∫–µ –Ω–∏–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è:
 */
let greeting1 = "Hello, world!"
let index1 = greeting1.firstIndex(of: ",") ?? greeting1.endIndex
let beginning = greeting1[..<index1]
let newString = String(beginning)

//üåÄ–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
//Swift –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç—Ä–∏ —Å–ø–æ—Å–æ–±–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å–∏–º–≤–æ–ª–æ–≤, —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
/*
 –†–∞–≤–µ–Ω—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º "—Ä–∞–≤–Ω–æ" (==) –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º "–Ω–µ —Ä–∞–≤–Ω–æ" (! =)
 */
let quotation1 = "We're a lot alike, you and I."
let sameQuotation = "We're a lot alike, you and I."
if quotation1 == sameQuotation {
    print("These two strings are considered equal")
}
/*
 –î–≤–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è (–∏–ª–∏ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤) —Å—á–∏—Ç–∞—é—Ç—Å—è —Ä–∞–≤–Ω—ã–º–∏, –µ—Å–ª–∏ –∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –≥—Ä–∞—Ñ–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –≥—Ä–∞—Ñ–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–∫–∞–ª—è—Ä–æ–≤ –Æ–Ω–∏–∫–æ–¥–∞ –∑–∞ –∫—É–ª–∏—Å–∞–º–∏.
 */

let eAcuteQuestion = "Voulez-vous un caf\u{E9}?"
let combinedEAcuteQuestion = "Voulez-vous un caf\u{65}\u{301}?"
if eAcuteQuestion == combinedEAcuteQuestion {
    print("These two strings are considered equal")
}
/*
 –ò –Ω–∞–æ–±–æ—Ä–æ—Ç, –õ–ê–¢–ò–ù–°–ö–ê–Ø –ó–ê–ì–õ–ê–í–ù–ê–Ø –ë–£–ö–í–ê A (U+0041 –∏–ª–∏ "A"), –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞ –ö–ò–†–ò–õ–õ–ò–ß–ï–°–ö–û–ô –ó–ê–ì–õ–ê–í–ù–û–ô –ë–£–ö–í–ï A (U+0410 –∏–ª–∏ "–ê"), –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏, –Ω–æ –Ω–µ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:
 */

let latinCapitalLetterA: Character = "\u{41}"
let cyrillicCapitalLetterA: Character = "\u{0410}"
if latinCapitalLetterA != cyrillicCapitalLetterA {
    print("These two characters aren't equivalent.")
}

//–†–∞–≤–µ–Ω—Å—Ç–≤–æ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
/*
 –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–º–µ–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∏–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å, –≤—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥—ã string hasPrefix(_:) –∏ hasSuffix(_:), –æ–±–∞ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–Ω–∏–º–∞—é—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∏–ø–∞ String –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
 */
let romeoAndJuliet = [
    "Act 1 Scene 1: Verona, A public place",
    "Act 1 Scene 2: Capulet's mansion",
    "Act 1 Scene 3: A room in Capulet's mansion",
    "Act 1 Scene 4: A street outside Capulet's mansion",
    "Act 1 Scene 5: The Great Hall in Capulet's mansion",
    "Act 2 Scene 1: Outside Capulet's mansion",
    "Act 2 Scene 2: Capulet's orchard",
    "Act 2 Scene 3: Outside Friar Lawrence's cell",
    "Act 2 Scene 4: A street in Verona",
    "Act 2 Scene 5: Capulet's mansion",
    "Act 2 Scene 6: Friar Lawrence's cell"
]
//–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ hasPrefix(_:) —Å –º–∞—Å—Å–∏–≤–æ–º romeoAndJuliet –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ü–µ–Ω –≤ –∞–∫—Ç–µ 1 –ø—å–µ—Å—ã:
var act1SceneCount = 0
for scene in romeoAndJuliet {
    if scene.hasPrefix("Act 1 ") {
        act1SceneCount += 1
    }
}
print("There are \(act1SceneCount) scenes in Act 1")

//–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ hasSuffix(_:) –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ü–µ–Ω, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ –æ—Å–æ–±–Ω—è–∫–µ –ö–∞–ø—É–ª–µ—Ç—Ç–∏ –∏–ª–∏ –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ –∏ —è—á–µ–π–∫–∏ –º–æ–Ω–∞—Ö–∞ –õ–æ—É—Ä–µ–Ω—Å–∞:
var mansionCount = 0
var cellCount = 0
for scene in romeoAndJuliet {
    if scene.hasSuffix("Capulet's mansion") {
        mansionCount += 1
    }
    if scene.hasSuffix("Friar Lawrence's cell") {
        cellCount += 1
    }
}
print("\(mansionCount) mansion scenes; \(cellCount) cell scenes")

//üåÄ–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ Unicode
//–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∑–Ω–∞—á–µ–Ω–∏—é String –≤ –æ–¥–Ω–æ–º –∏–∑ —Ç—Ä–µ—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å Unicode:
/*
 –ö–æ–ª–ª–µ–∫—Ü–∏—è –µ–¥–∏–Ω–∏—Ü –∫–æ–¥–∞ UTF-8 (–¥–æ—Å—Ç—É–ø —Å –ø–æ–º–æ—â—å—é —Å–≤–æ–π—Å—Ç–≤–∞ utf8 —Å—Ç—Ä–æ–∫–∏)

 –ö–æ–ª–ª–µ–∫—Ü–∏—è –∫–æ–¥–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü UTF-16 (–¥–æ—Å—Ç—É–ø —Å –ø–æ–º–æ—â—å—é —Å–≤–æ–π—Å—Ç–≤–∞ utf16 —Å—Ç—Ä–æ–∫–∏)

 –ö–æ–ª–ª–µ–∫—Ü–∏—è 21-–±–∏—Ç–Ω—ã—Ö —Å–∫–∞–ª—è—Ä–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π Unicode, —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ UTF-32 (–¥–æ—Å—Ç—É–ø–Ω–æ —Å –ø–æ–º–æ—â—å—é —Å–≤–æ–π—Å—Ç–≤–∞ unicodeScalars —Å—Ç—Ä–æ–∫–∏)
 */
//–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ UTF-8
let dogString = "Dog‚Äºüê∂"
for codeUnit in dogString.utf8 {
    print("\(codeUnit)", terminator: ", ")
}
print("")

//–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ UTF-16
for codeUnit in dogString.utf16 {
    print("\(codeUnit)", terminator: ", ")
}
print("")

//UnicodeScalar UInt32
for codeUnit in dogString.unicodeScalars {
    print("\(codeUnit.value)", terminator: ", ")
}
print("")

for codeUnit in dogString.unicodeScalars {
    print("\(codeUnit)", terminator: ", ")
}
print("")

for codeUnit in dogString.indices {
    print("\(codeUnit)", terminator: ", ")
}
print("")

